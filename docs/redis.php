<?php
 return array (
  'connect' => 'connect(host : string, [port : int = 6379], [timeout : float = 0.0]):bool',
  'psetex' => 'psetex(key : string, ttl : int, value : string):bool',
  'sscan' => 'sScan(key : string, iterator : int, [pattern : string = \'\'], [count : int = 0]):array|bool',
  'scan' => 'scan(iterator : int, [pattern : string = \'\'], [count : int = 0]):array|bool',
  'zscan' => 'zScan(key : string, iterator : int, [pattern : string = \'\'], [count : int = 0]):array|bool',
  'hscan' => 'hScan(key : string, iterator : int, [pattern : string = \'\'], [count : int = 0]):array',
  'client' => 'client(command : string, [arg : string = \'\']):mixed',
  'slowlog' => 'slowlog(command : string):mixed',
  'open' => 'open(host : string, [port : int = 6379], [timeout : float = 0.0]):void',
  'pconnect' => 'pconnect(host : string, [port : int = 6379], [timeout : float = 0.0]):bool',
  'popen' => 'popen(host : string, [port : int = 6379], [timeout : float = 0.0]):void',
  'close' => 'close():void',
  'setoption' => 'setOption(name : string, value : string):bool',
  'getoption' => 'getOption(name : string):int',
  'ping' => 'ping():string',
  'get' => 'get(key : string):bool|string',
  'set' => 'set(key : string, value : string, [timeout : int = 0]):bool',
  'setex' => 'setex(key : string, ttl : int, value : string):bool',
  'setnx' => 'setnx(key : string, value : string):bool',
  'del' => 'del(key1 : array|int, [key2 = null], [key3 = null]):int',
  'delete' => 'delete(key1, [key2 = null], [key3 = null]):void',
  'multi' => 'multi():Redis',
  'exec' => 'exec():void',
  'discard' => 'discard():void',
  'watch' => 'watch(key : array|string):void',
  'unwatch' => 'unwatch():void',
  'subscribe' => 'subscribe(channels : array, callback : array|string):void',
  'psubscribe' => 'psubscribe(patterns : array, callback : array|string):void',
  'publish' => 'publish(channel : string, message : string):int',
  'exists' => 'exists(key : string):bool',
  'incr' => 'incr(key : string):int',
  'incrbyfloat' => 'incrByFloat(key : string, increment : float):float',
  'incrby' => 'incrBy(key : string, value : int):int',
  'decr' => 'decr(key : string):int',
  'decrby' => 'decrBy(key : string, value : int):int',
  'getmultiple' => 'getMultiple(keys : array):array',
  'lpush' => 'lPush(key : string, value1 : string, [value2 = null], [valueN = null]):int',
  'rpush' => 'rPush(key : string, value1 : string, [value2 = null], [valueN = null]):int',
  'lpushx' => 'lPushx(key : string, value : string):int',
  'rpushx' => 'rPushx(key : string, value : string):int',
  'lpop' => 'lPop(key : string):string',
  'rpop' => 'rPop(key : string):string',
  'blpop' => 'blPop(keys : array):array',
  'brpop' => 'brPop(keys : array):array',
  'llen' => 'lLen(key : string):int',
  'lsize' => 'lSize(key : string):void',
  'lindex' => 'lIndex(key : string, index : int):String',
  'lget' => 'lGet(key : string, index : int):void',
  'lset' => 'lSet(key : string, index : int, value : string):BOOL',
  'lrange' => 'lRange(key : string, start : int, end : int):array',
  'lgetrange' => 'lGetRange(key : string, start : int, end : int):void',
  'ltrim' => 'lTrim(key : string, start : int, stop : int):array',
  'listtrim' => 'listTrim(key : string, start : int, stop : int):void',
  'lrem' => 'lRem(key : string, value : string, count : int):int',
  'lremove' => 'lRemove(key : string, value : string, count : int):void',
  'linsert' => 'lInsert(key : string, position : int, pivot : string, value : string):int',
  'sadd' => 'sAdd(key : string, value1 : string, [value2 = null], [valueN = null]):int',
  'srem' => 'sRem(key : string, member1 : string, [member2 = null], [memberN = null]):int',
  'sremove' => 'sRemove(key : string, member1 : string, [member2 = null], [memberN = null]):void',
  'smove' => 'sMove(srcKey : string, dstKey : string, member : string):bool',
  'sismember' => 'sIsMember(key : string, value : string):bool',
  'scontains' => 'sContains(key : string, value : string):void',
  'scard' => 'sCard(key : string):int',
  'spop' => 'sPop(key : string):string',
  'srandmember' => 'sRandMember(key : string):string',
  'sinter' => 'sInter(key1 : string, key2 : string, [keyN = null]):array',
  'sinterstore' => 'sInterStore(dstKey : string, key1 : string, key2 : string, [keyN = null]):int',
  'sunion' => 'sUnion(key1 : string, key2 : string, [keyN = null]):array',
  'sunionstore' => 'sUnionStore(dstKey : string, key1 : string, key2 : string, [keyN = null]):int',
  'sdiff' => 'sDiff(key1 : string, key2 : string, [keyN = null]):array',
  'sdiffstore' => 'sDiffStore(dstKey : string, key1 : string, key2 : string, [keyN = null]):int',
  'smembers' => 'sMembers(key : string):array',
  'sgetmembers' => 'sGetMembers(key : string):void',
  'getset' => 'getSet(key : string, value : string):string',
  'randomkey' => 'randomKey():string',
  'select' => 'select(dbindex : int):bool',
  'move' => 'move(key : string, dbindex : int):bool',
  'rename' => 'rename(srcKey : string, dstKey : string):bool',
  'renamekey' => 'renameKey(srcKey : string, dstKey : string):void',
  'renamenx' => 'renameNx(srcKey : string, dstKey : string):bool',
  'expire' => 'expire(key : string, ttl : int):bool',
  'pexpire' => 'pExpire(key : string, ttl):bool',
  'settimeout' => 'setTimeout(key : string, ttl : int):void',
  'expireat' => 'expireAt(key : string, timestamp : int):bool',
  'pexpireat' => 'pExpireAt(key : string, timestamp : int):bool',
  'keys' => 'keys(pattern : string):array',
  'getkeys' => 'getKeys(pattern : string):void',
  'dbsize' => 'dbSize():int',
  'auth' => 'auth(password : string):bool',
  'bgrewriteaof' => 'bgrewriteaof():bool',
  'slaveof' => 'slaveof([host : string = \'127.0.0.1\'], [port : int = 6379]):bool',
  'object' => 'object([string : string = \'\'], [key : string = \'\']):string',
  'save' => 'save():bool',
  'bgsave' => 'bgsave():bool',
  'lastsave' => 'lastSave():int',
  'type' => 'type(key : string):int',
  'append' => 'append(key : string, value : string):int',
  'getrange' => 'getRange(key : string, start : int, end : int):string',
  'substr' => 'substr(key : string, start : int, end : int):void',
  'setrange' => 'setRange(key : string, offset : int, value : string):string',
  'strlen' => 'strlen(key : string):int',
  'getbit' => 'getBit(key : string, offset : int):int',
  'setbit' => 'setBit(key : string, offset : int, value : bool|int):int',
  'bitcount' => 'bitCount(key : string):int',
  'bitop' => 'bitOp(operation : string, retKey : string, key1 : string, key2 : string, [key3 = null]):int',
  'flushdb' => 'flushDB():bool',
  'flushall' => 'flushAll():bool',
  'sort' => 'sort(key : string, [option : array|null = null]):array',
  'info' => 'info([option = null]):string',
  'resetstat' => 'resetStat():bool',
  'ttl' => 'ttl(key : string):int',
  'pttl' => 'pttl(key : string):int',
  'persist' => 'persist(key : string):bool',
  'mset' => 'mset(array : array):bool',
  'mget' => 'mget(array : array):array',
  'msetnx' => 'msetnx(array : array):int',
  'rpoplpush' => 'rpoplpush(srcKey : string, dstKey : string):string',
  'brpoplpush' => 'brpoplpush(srcKey : string, dstKey : string, timeout : int):string',
  'zadd' => 'zAdd(key : string, score1 : float, value1 : string, [score2 : float|null = null], [value2 = null], [scoreN : float|null = null], [valueN = null]):int',
  'zrange' => 'zRange(key : string, start : int, end : int, [withscores : bool|null = null]):array',
  'zrem' => 'zRem(key : string, member1 : string, [member2 = null], [memberN = null]):int',
  'zdelete' => 'zDelete(key : string, member1 : string, [member2 = null], [memberN = null]):int',
  'zrevrange' => 'zRevRange(key : string, start : int, end : int, [withscore : bool|null = null]):array',
  'zrangebyscore' => 'zRangeByScore(key : string, start : int, end : int, [options : array = array()]):array',
  'zrevrangebyscore' => 'zRevRangeByScore(key : string, start : int, end : int, [options : array = array()]):array',
  'zcount' => 'zCount(key : string, start : string, end : string):int',
  'zremrangebyscore' => 'zRemRangeByScore(key : string, start : float|string, end : float|string):int',
  'zdeleterangebyscore' => 'zDeleteRangeByScore(key : string, start : float, end : float):void',
  'zremrangebyrank' => 'zRemRangeByRank(key : string, start : int, end : int):int',
  'zdeleterangebyrank' => 'zDeleteRangeByRank(key : string, start : int, end : int):void',
  'zcard' => 'zCard(key : string):int',
  'zsize' => 'zSize(key : string):void',
  'zscore' => 'zScore(key : string, member : string):float',
  'zrank' => 'zRank(key : string, member : string):int',
  'zrevrank' => 'zRevRank(key : string, member : string):int',
  'zincrby' => 'zIncrBy(key : string, value : float, member : string):float',
  'zunion' => 'zUnion(Output : string, ZSetKeys : array, [Weights : array = null], [aggregateFunction : string = \'SUM\']):int',
  'zinter' => 'zInter(Output : string, ZSetKeys : array, [Weights : array = null], [aggregateFunction : string = \'SUM\']):int',
  'hset' => 'hSet(key : string, hashKey : string, value : string):int',
  'hsetnx' => 'hSetNx(key : string, hashKey : string, value : string):bool',
  'hget' => 'hGet(key : string, hashKey : string):string',
  'hlen' => 'hLen(key : string):int',
  'hdel' => 'hDel(key : string, hashKey1 : string, [hashKey2 = null], [hashKeyN = null]):int',
  'hkeys' => 'hKeys(key : string):array',
  'hvals' => 'hVals(key : string):array',
  'hgetall' => 'hGetAll(key : string):array',
  'hexists' => 'hExists(key : string, hashKey : string):bool',
  'hincrby' => 'hIncrBy(key : string, hashKey : string, value : int):int',
  'hincrbyfloat' => 'hIncrByFloat(key : string, field : string, increment : float):float',
  'hmset' => 'hMset(key : string, hashKeys : array):bool',
  'hmget' => 'hMGet(key : string, hashKeys : array):array',
  'config' => 'config(operation : string, key : string, [value : string]):array',
  'evaluate' => 'evaluate(script : string, [args : array = array()], [numKeys : int = 0]):void',
  'evalsha' => 'evalSha(scriptSha : string, [args : array = array()], [numKeys : int = 0]):mixed',
  'evaluatesha' => 'evaluateSha(scriptSha : string, [args : array = array()], [numKeys : int = 0]):void',
  'script' => 'script(command : string, script : string):mixed',
  'getlasterror' => 'getLastError():string',
  'clearlasterror' => 'clearLastError():bool',
  '_prefix' => '_prefix(value : \\The):string',
  '_unserialize' => '_unserialize(value : string):mixed',
  'dump' => 'dump(key : string):string',
  'restore' => 'restore(key : string, ttl : int, value : string):bool',
  'migrate' => 'migrate(host : string, port : int, key : string, db : int, timeout : int):bool',
  'time' => 'time():array',
  'echo' => 'echo()',
  'eval' => 'eval(script : string, [args : array = array()], [numKeys : int = 0])',
);